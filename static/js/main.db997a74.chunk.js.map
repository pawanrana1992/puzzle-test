{"version":3,"sources":["App/components/Tile/Tile.js","App/components/Board/Board.js","App/assets/img/shuffle.svg","App/Pages/Puzzle.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","_this","Object","C_Users_pawan_Documents_GitHub_puzzle_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_pawan_Documents_GitHub_puzzle_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_pawan_Documents_GitHub_puzzle_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","handleSize","elm","tileRef","current","clientWidth","setState","height","getWidth","React","createRef","state","width","bind","C_Users_pawan_Documents_GitHub_puzzle_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__","window","addEventListener","removeEventListener","_this2","cls","value","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","style","lineHeight","backgroundImage","concat","ref","className","onClick","clickHandler","Component","Board","tileWidth","zero","possibleTopIdx","possiblRightIdx","possiblBottomIdx","possibleLeftIdx","boardRef","getClickables","board","size","nextProps","join","clearImmediate","tm","zeroIndex","indexOf","zeroCoordinate","getCoordFromIndex","row","getIndexFromCoord","column","idx","Math","floor","col","index","Block","children","animateIt","Array","from","transform","setTimeout","nextBoard","slice","temp","updateBoard","_this3","_this$props","squares","map","val","react__WEBPACK_IMPORTED_MODULE_5___default","_Tile_Tile__WEBPACK_IMPORTED_MODULE_6__","key","tileClickHandler","gridTemplateColumns","module","exports","__webpack_require__","p","Puzzle","classCallCheck","possibleConstructorReturn","getPrototypeOf","shuffle","array","temporaryValue","randomIndex","currentIndex","length","random","puzzleSize","sizeArray","push","newGame","i","react_default","src","sfIcon","alt","App","Pages_Puzzle","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db997a74.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport './_tile.scss'\r\nclass Tile extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.tileRef = React.createRef();\r\n        this.state = {\r\n            width: '100%',\r\n            height:'100%'\r\n        };\r\n        this.handleSize = this.handleSize.bind(this)\r\n    }\r\n    componentDidMount(){\r\n        this.handleSize();\r\n        window.addEventListener('resize',this.handleSize,false)\r\n    }\r\n    handleSize = ()=>{\r\n        let elm = this.tileRef.current.clientWidth;\r\n        this.setState({\r\n            height: elm+'px'\r\n        },()=>{\r\n            this.props.getWidth(elm)\r\n        })\r\n    };\r\n    componentWillUnmount(){\r\n        window.removeEventListener('resize',this.handleSize);\r\n    }\r\n    render() {\r\n        const {height} = this.state;\r\n        const cls = this.props.value === 0 ? 'tile zero' : 'tile';\r\n        return (\r\n            <div style={{height:height, lineHeight:height,backgroundImage:this.props.value === 0 ? '' : `url(./static/tiles/${this.props.value}.png)`}} ref={this.tileRef} className={cls} onClick={() => this.props.clickHandler()}>{this.props.value}</div>\r\n        );\r\n    }\r\n}\r\nTile.propTypes = {\r\n    value: PropTypes.number.isRequired,\r\n    clickHandler: PropTypes.func.isRequired,\r\n};\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport Tile from \"../Tile/Tile\";\r\nimport PropTypes from 'prop-types';\r\nimport './_board.scss'\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            zero: 0,\r\n            possibleTopIdx: 0,\r\n            possiblRightIdx: 0,\r\n            possiblBottomIdx: 0,\r\n            possibleLeftIdx: 0,\r\n            tileWidth: 0,\r\n        };\r\n        this.boardRef = React.createRef();\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getClickables(this.props.board, this.props.size);\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        this.getClickables(nextProps.board, nextProps.size);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        const curr = this.props.board.join('');\r\n        const next = nextProps.board.join('');\r\n        return curr !== next;\r\n    }\r\n    componentWillUnmount(){\r\n        clearImmediate(this.tm)\r\n    }\r\n\r\n    getClickables(board, size) {\r\n        const zeroIndex = board.indexOf(0);\r\n        const zeroCoordinate = this.getCoordFromIndex(zeroIndex, size);\r\n        const possibleTopIdx = zeroCoordinate.row > 0 ? this.getIndexFromCoord(zeroCoordinate.row - 1, zeroCoordinate.column, size) : null;\r\n        const possiblRightIdx = zeroCoordinate.column < size ? this.getIndexFromCoord(zeroCoordinate.row, zeroCoordinate.column + 1, size) : null;\r\n        const possiblBottomIdx = zeroCoordinate.row < size ? this.getIndexFromCoord(zeroCoordinate.row + 1, zeroCoordinate.column, size) : null;\r\n        const possibleLeftIdx = zeroCoordinate.column > 0 ? this.getIndexFromCoord(zeroCoordinate.row, zeroCoordinate.column - 1, size) : null;\r\n        this.setState({\r\n            zero: zeroIndex,\r\n            possibleTopIdx: possibleTopIdx,\r\n            possiblRightIdx: possiblRightIdx,\r\n            possiblBottomIdx: possiblBottomIdx,\r\n            possibleLeftIdx: possibleLeftIdx\r\n        });\r\n    }\r\n\r\n    getCoordFromIndex(idx, size) {\r\n        return {row: Math.floor(idx / size) + 1, column: (idx % size) + 1};\r\n    }\r\n\r\n    getIndexFromCoord(row, col, size) {\r\n        return (size * (row - 1)) + col - 1;\r\n    }\r\n\r\n    tileClickHandler(index) {\r\n        const {tileWidth} = this.state;\r\n        if (index === this.state.possibleTopIdx || index === this.state.possiblRightIdx ||\r\n            index === this.state.possiblBottomIdx || index === this.state.possibleLeftIdx){\r\n\r\n            let animWrap = this.boardRef.current;\r\n            let Block = animWrap.children;\r\n            let indexBlock = Array.from(Block);\r\n            let animateIt = indexBlock[index];\r\n            if(index === this.state.possibleTopIdx){\r\n                animateIt.style.transform = `translateY(${tileWidth}px)`;\r\n            }if(index === this.state.possiblRightIdx){\r\n                animateIt.style.transform = `translateX(-${tileWidth}px)`;\r\n            }\r\n            if(index === this.state.possiblBottomIdx){\r\n                animateIt.style.transform = `translateY(-${tileWidth}px)`;\r\n\r\n            }\r\n            if(index === this.state.possibleLeftIdx){\r\n                animateIt.style.transform = `translateX(${tileWidth}px)`;\r\n\r\n            }\r\n            this.tm = setTimeout(()=>{\r\n                this.nextBoard(index);\r\n                animateIt.style.transform = 'none';\r\n            },100);\r\n        }\r\n\r\n    }\r\n\r\n    nextBoard(index) {\r\n        const board = this.props.board.slice();\r\n        const temp = board[index];\r\n        board[index] = board[this.state.zero];\r\n        board[this.state.zero] = temp;\r\n        this.props.updateBoard(board);\r\n        clearImmediate(this.tm)\r\n\r\n        //handle anim\r\n\r\n    }\r\n    getWidth =(width)=>{\r\n        this.setState({\r\n            tileWidth:width\r\n        })\r\n    };\r\n\r\n\r\n    render() {\r\n        const {size,board} = this.props;\r\n\r\n        const squares = board.map((val, index) => {\r\n            if ((index + 1) % this.props.size === 0) {\r\n                return (\r\n                    <Tile key={index} value={val} getWidth={this.getWidth.bind(this)} clickHandler={this.tileClickHandler.bind(this, index)}/>\r\n\r\n                );\r\n            }\r\n            return <Tile key={index} value={val} getWidth={this.getWidth.bind(this)} clickHandler={this.tileClickHandler.bind(this, index)}/>;\r\n        });\r\n        return (\r\n            <div className='wrap-box' ref={this.boardRef} style={{gridTemplateColumns: `repeat(${size}, 1fr)`,}}>\r\n                {squares}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nBoard.propTypes = {\r\n    size: PropTypes.number.isRequired,\r\n    board:PropTypes.array.isRequired,\r\n    updateBoard:PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Board;","module.exports = __webpack_public_path__ + \"static/media/shuffle.d744e683.svg\";","import React from \"react\";\r\nimport Board from \"../components/Board/Board\";\r\nimport './_Puzzle.scss';\r\nimport PropTypes from 'prop-types';\r\nimport sfIcon from '../assets/img/shuffle.svg'\r\nclass Puzzle extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { board: [], size: 0 };\r\n    }\r\n    componentDidMount(){\r\n        const {puzzleSize} = this.props;\r\n        let sizeArray = [];\r\n        for (let idx = 0; idx<puzzleSize*puzzleSize; idx++){\r\n            sizeArray.push(idx);\r\n        }\r\n        this.setState({\r\n            board:sizeArray,\r\n            size:puzzleSize,\r\n        },()=>{\r\n            this.newGame(puzzleSize)\r\n        })\r\n    }\r\n\r\n\r\n    newGame(size) {\r\n        let board = new Array(size * size);\r\n        for (let i = 0; i < size * size; ++i) board[i] = i;\r\n        board = this.shuffle(board);\r\n        this.updateBoard(board, size);\r\n        this.setState({ size: size });\r\n    }\r\n\r\n    //update board\r\n    updateBoard(board) {\r\n        this.setState({ board: board});\r\n    }\r\n\r\n    //manage shuffle\r\n\r\n    shuffle= (array) =>{\r\n        // const tempV = o.slice();\r\n        let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n        while (0 !== currentIndex) {\r\n\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n            // And swap it with the current element.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n            return array;\r\n\r\n    };\r\n    render() {\r\n        return (\r\n            <div className=\"page\">\r\n                <div className='wrap-pz'>\r\n                    <div className=\"body-wrap\">\r\n                        <div className=\"header\">\r\n                            <h3>Finish puzzle</h3>\r\n                        </div>\r\n                        {\r\n                            this.state && this.state.board ?\r\n                                <Board size={this.state.size} board={this.state.board} updateBoard={this.updateBoard.bind(this)}/>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                    <button className={'btn'} value='Shuffle' onClick={this.newGame.bind(this, this.props.puzzleSize)}> <span><img\r\n                        src={sfIcon} alt=\"\"/></span></button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPuzzle.propTypes = {\r\n    puzzleSize: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\nexport default Puzzle;","import React, { Component } from 'react';\r\nimport Puzzle from \"./App/Pages/Puzzle\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Puzzle puzzleSize={5}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './App/assets/sass/app-style.scss'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}